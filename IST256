from __future__ import print_function

import argparse
import json
import pprint
import requests
import sys
import urllib

#Imports for google maps PLEASE INSTALL THIS THROUGH PIP. 
# IT IS A MODULE/PACKAGE THAT COMPLETELY SIMPLIFIES THE 
#ENTIRE GOOGLE MAPS API
import googlemaps

from urllib.error import HTTPError
from urllib.parse import quote
from urllib.parse import urlencode


#Yelp's API key
YELP_KEY= 'YOUR YELP API KEY HERE'


#Google Maps API Key

GOOGLE_KEY = 'YOUR GOOGLE API KEY HERE'
gmaps = googlemaps.Client(key=GOOGLE_KEY)


# API constants, you shouldn't have to change these.
YELP_HOST = 'https://api.yelp.com'
SEARCH_PATH = '/v3/businesses/search'
BUSINESS_PATH = '/v3/businesses/'  # Business ID will come after slash.


# Defaults for our simple example.
DEFAULT_TERM = 'dinner'   #You can change this to wahtever your or want or completely remove it entirely so searches can larger
SEARCH_LIMIT = 10     #To avoid slowing down your program, set limit to arround 10
DEFAULT_LATITUDE = ""
DEFAULT_LONGITUDE = ""


def request(host, path, YELP_KEY, url_params=None):
    """Given your YELP_KEY, send a GET request to the API.
    Args:
        host (str): The domain host of the API.
        path (str): The path of the API after the domain.
        YELP_KEY (str): Your API Key.
        url_params (dict): An optional set of query parameters in the request.
    Returns:
        dict: The JSON response from the request.
    Raises:
        HTTPError: An error occurs from the HTTP request.
    """
    url_params = url_params or {}
    url = '{0}{1}'.format(host, quote(path.encode('utf8')))
    headers = {
        'Authorization': 'Bearer %s' % YELP_KEY,
    }

    

    response = requests.request('GET', url, headers=headers, params=url_params)

    return response.json()


def search(YELP_KEY, term, latitude, longitude):
    """Query the Search API by a search term and location.
    Args:
        term (str): The search term passed to the API.
        location (str): The search location passed to the API.
    Returns:
        dict: The JSON response from the request.
    """

    url_params = {
        'term': term.replace(' ', '+'),
        'latitude': latitude.replace(' ', '+'),
        'longitude': longitude.replace(' ', '+'),
        'limit': SEARCH_LIMIT
    }
    return request(YELP_HOST, SEARCH_PATH, YELP_KEY, url_params=url_params)


def get_business(YELP_KEY, business_id):
    """Query the Business API by a business ID.
    Args:
        business_id (str): The ID of the business to query.
    Returns:
        dict: The JSON response from the request.
    """
    business_path = BUSINESS_PATH + business_id

    return request(YELP_HOST, business_path, YELP_KEY)


def query_api(term, latitude, longitude):
    """Queries the API by the input values from the user.
    Args:
        term (str): The search term to query.
        location (str): The location of the business to query.
    """
    response = search(YELP_KEY, term, latitude, longitude)

    businesses = response.get('businesses')

    if not businesses:
        print(u'No businesses for {0} in {1} {2} found.'.format(term, latitude, longitude))
        return
    i = 0
    while (i < SEARCH_LIMIT):
        business_id = businesses[i]['id']
        #print(u'{0} businesses found, querying business info ' \
        #'for the top result "{1}" ...'.format(
        #    len(businesses), business_id))
        response = get_business(YELP_KEY, business_id)
        restaurantName = response['name']
        restaurantRatings = str(response['rating'])
        resturantLocation = response['location']
        #print(u'Result for business "{0}" found:'.format(business_id))
        pprint.pprint('Name: ' + restaurantName, indent=3)
        pprint.pprint('Ratings:' + restaurantRatings, indent=3)
        pprint.pprint(resturantLocation, indent=3)
        i+=1



def main():
    
    
    
    #Google
    zip_code = input("Enter your zip code here or would you like to find your current loction zipcode(Press: 'Y'): ")
    if zip_code == "Y":
        DEFAULT_LATITUDE = str(gmaps.geolocate()['location']['lat'])
        DEFAULT_LONGITUDE = str(gmaps.geolocate()['location']['lng'])
    else:
        DEFAULT_LATITUDE = str(gmaps.geocode(components={'postal_code': zip_code})[0]['geometry']['location']['lat'])
        DEFAULT_LONGITUDE = str(gmaps.geocode(components={'postal_code': zip_code})[0]['geometry']['location']['lng'])
    
    
    
    
    #Yelp's
    parser = argparse.ArgumentParser()

    parser.add_argument('-q', '--term', dest='term', default=DEFAULT_TERM,
                        type=str, help='Search term (default: %(default)s)')
    parser.add_argument('-lat', '--latitude', dest='latitude',
                        default=DEFAULT_LATITUDE, type=str,
                        help='Search latitude (default: %(default)s)')
    parser.add_argument('-lng', '--longitude', dest='longitude',
                        default=DEFAULT_LONGITUDE, type=str,
                        help='Search longitude (default: %(default)s)')

    input_values = parser.parse_args()

    try:
        query_api(input_values.term, input_values.latitude, input_values.longitude)
    except HTTPError as error:
        sys.exit(
            'Encountered HTTP error {0} on {1}:\n {2}\nAbort program.'.format(
                error.code,
                error.url,
                error.read(),
            )
        )
    


if __name__ == '__main__':
    main()
